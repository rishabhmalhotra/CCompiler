#lang racket

;; cfgrl -- Convert CFG-R to CFG Format
;; 
;; Author:      Gordon V. Cormack
;; Revised by:  P. L. Ragde and Gordon V. Cormack
;; Version:     20081106.4
;;
;; Input:  .cfg file with single derivation
;; Output: equivalent .cfg file
;;
;; Usage:  mzscheme cfgrl.ss < file.cfg-r > file.cfg
;;

(require srfi/13)

(define path "lr1.txt")
(define in (open-input-file path))
(define in2 (open-input-file "lr2.txt"))
(define out (open-output-file path #:exists 'append))

; global list
(define p4out '())

;;
;; Helper functions
;;

(define (traverse t d)  ;; output leftmost derivation of tree t with indentation d
  (printf "~a~a\n" (make-string d #\space) (first t)) ;; print root
  (map (lambda (x) (traverse x (+ 1 d))) (rest t)))   ;; print all subtrees

(define (dump h)        ;; print keys in hashtable h in .cfg file format
  (printf "~a\n" (hash-count h))
  (hash-for-each h (lambda (x y) (printf "~a\n" x))))

(define (popper stack rhs lhs node) ;; pop rhs and accumulate subtrees, push new node
  (if (null? rhs) 
    (cons (cons lhs node) stack)    ;; done pops, push node = (rule . subtrees) 
    (popper (rest stack) (rest rhs) lhs (cons (first stack) node)))) ;; pop some more

(define (lr-do s)        ;; build tree from remaining input using stack s
  (define f (read-line in2))
  (when (not (eof-object? f))
    (define L (first (string-tokenize f)))                         ;; LHS symbol
    (define r (rest (string-tokenize f)))                          ;; RHS symbols
    (define n (filter (lambda (x) (hash-ref N x false)) r))    ;; remove terminals
    (define t (popper s (reverse n) f '()))                         ;; reduce rule
    (if (equal? S L) 
        (first (popper s (list S) f '()))    ;; special case reduce S' -> |- S -|
        (lr-do t))))                         ;; general case, continue
  
(define (lr) (lr-do '())) ;; wrapper function to read leftmost derivation, build tree

;;
;; Definitions and helpers for Node structure
;;

(struct node (tokenType tokenVal terminal? children))
;; A Node is a (make-node Str Str Bool (list of nodes))

;;
;; Helper functions
;;

;; read n symbols / lines into hash-table t -> keys begin from beginKey
(define (readsyms n t beginKey)
  (cond 
    [(zero? n) (void)]
    [else
     (hash-set! t beginKey (read-line in))
     (readsyms (sub1 n) t (+ beginKey 1))]))


;; Read the transitions lines and put all of them into a hash-table called t
(define (readTrans t numberOfTrans)
   (when
     (> numberOfTrans 0)
     (define line (read-line in))
     (hash-set! t (string-append (first (string-split line)) " " (second (string-split line)))
                (string-append (third (string-split line)) " " (fourth (string-split line))))
     (readTrans t (- numberOfTrans 1))))


;; global list of strings containing the upside order of our inverted P4 output reversed
(define upsideDerivation '())
(define printListG '())
(define reverseStack '())

;; Function to read, parse and update stacks and everything from input
(define (readExp lstStringsReadLine nodeStack stateStack TransTable prodRules fromReduce fromReduceString printList wordsRead S)
  (cond
    [(empty? lstStringsReadLine)
     (define outputLastLine '())
     (for-each (lambda(x) (set! outputLastLine (list x))) printList)
     (set! reverseStack (list (string-append S " " (string-join (reverse nodeStack)) "\n")))
     (set! printListG printList)]
    [(and (hash-has-key? TransTable (string-append (number->string (first stateStack)) " " (first lstStringsReadLine))) (not fromReduce))
      (cond
        [(equal? (first (string-split (hash-ref TransTable (string-append (number->string (first stateStack)) " " (first lstStringsReadLine))))) "shift")
         (shiftCase lstStringsReadLine nodeStack stateStack TransTable prodRules
                    (string-append (number->string (first stateStack)) " " (first lstStringsReadLine)) fromReduce printList wordsRead S)]              ;; keyToLookup
        [(equal? (first (string-split (hash-ref TransTable (string-append (number->string (first stateStack)) " " (first lstStringsReadLine))))) "reduce")
         (reduceCase lstStringsReadLine nodeStack stateStack TransTable prodRules
                     (string-append (number->string (first stateStack)) " " (first lstStringsReadLine)) printList wordsRead S)])]                      ;; keyToLookup
    [(and (hash-has-key? TransTable (string-append (number->string (first stateStack)) " " fromReduceString)) fromReduce)
     (cond
        [(equal? (first (string-split (hash-ref TransTable (string-append (number->string (first stateStack)) " " fromReduceString)))) "shift")
         (shiftCase lstStringsReadLine nodeStack stateStack TransTable prodRules
                    (string-append (number->string (first stateStack)) " " fromReduceString) fromReduce printList wordsRead S)]                        ;; keyToLookup
        [(equal? (first (string-split (hash-ref TransTable (string-append (number->string (first stateStack)) " " fromReduceString)))) "reduce")
         (reduceCase lstStringsReadLine nodeStack stateStack TransTable prodRules
                     (string-append (number->string (first stateStack)) " " fromReduceString) printList wordsRead S)])]                                ;; keyToLookup
    [else
     (display (string-append "ERROR at " (number->string (+ wordsRead 1)) "\n") [current-error-port])]))

;; shift function
(define (shiftCase lstStringsReadLine nodeStack stateStack TransTable prodRules keyToLookup fromReduce printList wordsRead S)
  (define valFromTransTable (hash-ref TransTable keyToLookup))
  (if (not fromReduce)
      (readExp (rest lstStringsReadLine) (append (list (second (string-split keyToLookup))) nodeStack)
               (append (list (string->number (second (string-split valFromTransTable)))) stateStack) TransTable prodRules false "" printList (add1 wordsRead) S)
      (readExp lstStringsReadLine (append (list (second (string-split keyToLookup))) nodeStack)
               (append (list (string->number (second (string-split valFromTransTable)))) stateStack) TransTable prodRules false "" printList wordsRead S)))

;; reduce function
(define (reduceCase lstStringsReadLine nodeStack stateStack TransTable prodRules keyToLookup printList wordsRead S)
  (define valFromTransTable (hash-ref TransTable keyToLookup))
  (define prodRule (hash-ref prodRules (string->number (second (string-split valFromTransTable)))))         ; eg: expr expr - term
  (define lenToPop (- (length (string-split prodRule)) 1))
  (readExp lstStringsReadLine (list-tail nodeStack (- (length nodeStack) (- (length nodeStack) lenToPop)))
           (list-tail stateStack (- (length stateStack) (- (length stateStack) lenToPop))) TransTable
           prodRules true (first (string-split prodRule)) (append printList (list prodRule)) wordsRead S))

;; Reads in the sequence (redirected input) to be used
(define (readSeq str)
  (define line (read-line))
  (cond
    [(eof-object? line) str]
    [else
     (string-append str " " (readSeq (first (string-split line))))]))

#|
(define (parse-tree T N R S lineStr line counter)          ;lineStr -> truDerivation & line -> (read-line)
  ;(define line (read-line))
  (cond
    [(equal? counter 0)
     [(not (hash-has-key? T (first (string-split lineStr))))
      (node (first (string-split lineStr)) "0" false (list (for-each (lambda(x) (parse-tree x))
                                                                        (list-tail (string-split lineStr) (- (length (string-split lineStr)) 1)))))
      (+ counter 1)]]
    [else
     [(not (hash-has-key? T (first (string-split lineStr))))
      (make-node (first (string-split lineStr)) "0" false (list (for-each (lambda(x) (parse-tree x))
                                                                          (list-tail (string-split lineStr) (- (length (string-split lineStr)) 1)))))]
     [else
      (make-node (first (string-split lineStr)) (if (equal? (first (string-split lineStr)) "NUM")
                                                    ]]))
|#
;;
;; Main program
;;

(define T (make-hash))                      ;; T is a hash-table for terminals
(define N (make-hash))                      ;; N is a hash-table for nonterminals
(define R (make-hash))                      ;; R is a hash-table for production rules
(define TransTable (make-hash))             ;; TransTable is a hash-table for second last part of Lr1 file (transitions)
(define nodeStack '())
(define stateStack '(0))

(define n1 (string->number (read-line in)))
(readsyms n1 T 0)                                                       ;; read terminals into hashtable T
(define n2 (string->number (read-line in)))
(readsyms n2 N 0)                                                       ;; read nonterminals into hashtable N
(define S (read-line in))                                               ;; start symbol S has the first line NOW
(define n3 (string->number(read-line in)))
(readsyms n3 R 0)                                                       ;; read production rules (as strings)
(define NumberOfStatesString (read-line in))                               ;; line at hand is the one containing the number of states in the LR(0) Automaton
(define NumberOfTransString (read-line in))                                ;; line at hand is the one containing the number of transitions or the "reduce"s functions
(readTrans TransTable (string->number NumberOfTransString))             ;; make a TransTable (hash table) of all the transitions


(define readLineString (string-append "\nBOF " (readSeq "") " EOF"))    ;; readLineString is BOF INT WAIN.....
(write readLineString out)
(close-output-port out)
(define readTokens (readSeq ""))                                        ;; readTokens is INT int \n WAIN wain \n ...... (pairs of 2 column tokens basically) 
(define lstStringsReadLine (string-split readLineString))               ;; list of strings from the readInput: '("BOF", "id", "-", "(",........)


(define parsetree (lr))                                                 ;; read reverse rightmost derivation into parsetree
(define truDerivation (traverse parsetree 0))                           ;; write forward leftmost derivation (default function)
(close-input-port in)
(close-input-port in2)

; for P5
(readExp lstStringsReadLine nodeStack stateStack TransTable R false "" '() 0 S)
; for p6
(set! p4out (append printListG reverseStack))